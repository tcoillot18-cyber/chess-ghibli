\
(function(w){
  function idx(sq){ var f=sq.charCodeAt(0)-97, r=sq.charCodeAt(1)-49; return {f,r}; }
  function inb(f,r){ return f>=0&&f<8&&r>=0&&r<8; }
  function startBoard(){
    var e=null,W='w',B='b';
    var P=(c)=>({type:'p',color:c}), R=(c)=>({type:'r',color:c}), N=(c)=>({type:'n',color:c}), Bf=(c)=>({type:'b',color:c}), Q=(c)=>({type:'q',color:c}), K=(c)=>({type:'k',color:c});
    return [
      [R(W),N(W),Bf(W),Q(W),K(W),Bf(W),N(W),R(W)],
      [P(W),P(W),P(W),P(W),P(W),P(W),P(W),P(W)],
      [e,e,e,e,e,e,e,e],
      [e,e,e,e,e,e,e,e],
      [e,e,e,e,e,e,e,e],
      [e,e,e,e,e,e,e,e],
      [P(B),P(B),P(B),P(B),P(B),P(B),P(B),P(B)],
      [R(B),N(B),Bf(B),Q(B),K(B),Bf(B),N(B),R(B)]
    ];
  }
  function sqOf(f,r){ return String.fromCharCode(97+f)+String.fromCharCode(49+r); }
  function pieceAt(b,sq){ var p=idx(sq); return b[7-p.r][p.f]; }
  function setAt(b,sq,val){ var p=idx(sq); b[7-p.r][p.f]=val; }
  function genMoves(b,turn,sq){
    var p=pieceAt(b,sq); if(!p || p.color!==turn) return [];
    var res=[], f=idx(sq).f, r=idx(sq).r, dr,df,nf,nr,t,target;
    function add(to){ var tpiece=pieceAt(b,to); res.push({from:sq,to:to,captured:tpiece?tpiece.type:undefined,piece:p.type}); }
    if(p.type==='p'){
      var dir = (p.color==='w')?+1:-1;
      var startRank = (p.color==='w')?1:6;
      var nf=f, nr=r+dir, t=sqOf(nf,nr);
      if(inb(nf,nr) && !pieceAt(b,t)){ res.push({from:sq,to:t,piece:p.type});
        if(r===startRank){ nr=r+2*dir; t=sqOf(nf,nr); if(!pieceAt(b,t)) res.push({from:sq,to:t,piece:p.type}); }
      }
      for(df of [-1,1]){
        nf=f+df; nr=r+dir;
        if(inb(nf,nr)){ t=sqOf(nf,nr); target=pieceAt(b,t); if(target && target.color!==p.color) add(t); }
      }
    } else if(p.type==='n'){
      var jumps=[[1,2],[2,1],[2,-1],[1,-2],[-1,-2],[-2,-1],[-2,1],[-1,2]];
      for(var k=0;k<jumps.length;k++){ nf=f+jumps[k][0]; nr=r+jumps[k][1];
        if(!inb(nf,nr)) continue; t=sqOf(nf,nr); target=pieceAt(b,t);
        if(!target || target.color!==p.color) add(t);
      }
    } else if(p.type==='k'){
      for(df=-1;df<=1;df++){ for(dr=-1;dr<=1;dr++){
        if(df===0 && dr===0) continue; nf=f+df; nr=r+dr;
        if(!inb(nf,nr)) continue; t=sqOf(nf,nr); target=pieceAt(b,t);
        if(!target || target.color!==p.color) add(t);
      }}
    } else {
      var dirs=[];
      if(p.type==='b'||p.type==='q') dirs.push([1,1],[1,-1],[-1,1],[-1,-1]);
      if(p.type==='r'||p.type==='q') dirs.push([1,0],[-1,0],[0,1],[0,-1]);
      for(var d=0;d<dirs.length;d++){
        df=dirs[d][0]; dr=dirs[d][1]; nf=f+df; nr=r+dr;
        while(inb(nf,nr)){
          t=sqOf(nf,nr); target=pieceAt(b,t);
          if(!target){ add(t); } else { if(target.color!==p.color) add(t); break; }
          nf+=df; nr+=dr;
        }
      }
    }
    return res;
  }
  function Board(){
    var b=startBoard(), turn='w';
    return {
      board: function(){ return b.map(row=>row.map(p=>p?{type:p.type,color:p.color}:null)); },
      reset: function(){ b=startBoard(); turn='w'; },
      turn: function(){ return turn; },
      get: function(sq){ return pieceAt(b,sq); },
      moves: function(opts){ var sq=opts && opts.square; if(!sq) return []; return genMoves(b,turn,sq).map(m=>({from:m.from,to:m.to,verbose:true})); },
      move: function(m){
        var legal = genMoves(b,turn,m.from).find(x=>x.to===m.to);
        if(!legal) return null;
        var P = pieceAt(b,m.from);
        var to = m.to;
        // promotions to queen
        var r = idx(to).r;
        if(P.type==='p' && ((P.color==='w' && r===7) || (P.color==='b' && r===0))){
          setAt(b,m.from,null); setAt(b,to,{type:(m.promotion||'q'),color:P.color}); turn = (turn==='w')?'b':'w'; return {flags:'p'};
        }
        setAt(b,m.from,null); setAt(b,to,P); turn = (turn==='w')?'b':'w'; return {};
      }
    };
  }
  w.Chess = Board;
})(window);
